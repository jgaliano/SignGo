<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firma Digital</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Estilos básicos para el template */
        .pdf-page {
            position: relative;
            margin: 0;
            padding: 0;
            display: none;  /* Solo se muestra la página activa */
        }
        .dropped-item {
            position: absolute;
            cursor: pointer;
            padding: 3px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 3px;
        }
        .delete-circle {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: red;
            color: white;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            text-align: center;
            font-size: 12px;
            cursor: pointer;
        }
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        .pagination-buttons {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            justify-content: center;
            width: 100%;
            z-index: 10;
        }
        .pagination-buttons button {
            margin: 0 5px;
        }
        /* Ajustes para que las páginas se redimensionen correctamente */
        .pdf-page canvas {
            width: 100% !important;
            height: auto !important;
        }
        /* Asegura que los botones siempre estén en la parte inferior */
        body, html {
            height: 100%;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        #documentsTabContent {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 60px; /* Espacio suficiente para los botones */
        }
        
        /* Estilo para el cuadrito azul */
        .draggable-box {
            position: absolute;
            background-color: blue;
            border-radius: 5px;
            cursor: pointer;
            touch-action: none;  /* Impide el comportamiento por defecto de los gestos táctiles */
        }

    </style>
</head>
<body>
    <div id="overlay" class="d-none">
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <div class="container">

        <!-- Contenedor para los firmantes -->
        <div id="firmantes" class="my-4">
            <!-- Los firmantes se agregarán aquí dinámicamente -->
        </div>

        <!-- Contenedor para los documentos -->
        <div id="documentsTabContent">
            <!-- Las páginas de los documentos se agregarán aquí dinámicamente -->
        </div>
    </div>

    <!-- Botones de navegación -->
    <div class="pagination-buttons">
        <button id="prevButton" class="btn btn-secondary">Página Anterior</button>
        <button id="nextButton" class="btn btn-primary">Página Siguiente</button><br>
        <div class="d-flex justify-content-center">
            <button class="btn btn-success">Firmar</button>
        </div>
    </div>
    

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
    <script>
        const pdfFiles = {{ pdf_files|safe }};  // Array de archivos PDF
        const firmantes = {{ firmantes|safe }};  // Array de firmantes
        const firmantesContainer = document.getElementById('firmantes');
        const documentsTabContent = document.getElementById('documentsTabContent');
        const firmantesUsados = {};
        const documentPages = {};

        // Inicializar firmantes
        firmantes.forEach((firmante) => {
            const firmanteItem = document.createElement('div');
            firmanteItem.classList.add('firmante-item', 'mb-2');
            firmanteItem.textContent = firmante.name;
            firmantesContainer.appendChild(firmanteItem);
            firmanteItem.draggable = true;
            firmanteItem.dataset.firmanteName = firmante.name;
            firmanteItem.dataset.firmanteId = firmante.id;

            firmanteItem.addEventListener('dragstart', (event) => {
                event.dataTransfer.setData('text/plain', firmante.name);
                event.dataTransfer.setData('firmanteId', firmante.id);
            });
        });

        // Inicializar documentos PDF
        pdfFiles.forEach((file, index) => {
            const fileName = file.split('/').pop();
            const loadingTask = pdfjsLib.getDocument(file);
            loadingTask.promise.then((pdf) => {
                documentPages[`document-${index}`] = Array.from({ length: pdf.numPages }, (_, i) => i + 1);

                // Mostrar solo la primera página por defecto
                let currentPage = 1;

                const renderPage = (pageNumber) => {
                    // Borrar la página anterior
                    const existingPage = document.querySelector('.pdf-page');
                    if (existingPage) {
                        existingPage.remove();
                    }

                    const pageDiv = document.createElement('div');
                    pageDiv.classList.add('pdf-page');
                    pageDiv.dataset.pageNumber = pageNumber;
                    documentsTabContent.appendChild(pageDiv);

                    pdf.getPage(pageNumber).then((page) => {
                        const viewport = page.getViewport({ scale: 1.5 });
                        const canvas = document.createElement('canvas');
                        const context = canvas.getContext('2d');
                        canvas.height = viewport.height;
                        canvas.width = viewport.width;
                        const renderContext = { canvasContext: context, viewport: viewport };
                        page.render(renderContext);
                        pageDiv.appendChild(canvas);

                        // Redimensionar todas las páginas para que se ajusten al ancho de la pantalla
                        const canvasContainer = pageDiv.querySelector('canvas');
                        const maxWidth = window.innerWidth - 20; // Margen
                        const scale = maxWidth / canvasContainer.width;
                        canvasContainer.style.width = `${maxWidth}px`;
                        canvasContainer.style.height = `${canvasContainer.height * scale}px`;

                        pageDiv.style.display = 'block'; // Mostrar la página activa

                        // Crear cuadro azul draggable
                        const box = document.createElement('div');
                        box.classList.add('draggable-box');
                        pageDiv.appendChild(box);

                        // Calcular dimensiones y posición para el cuadro azul
                        const boxWidth = canvas.width * scale * 0.3;  // 30% del ancho de la página
                        const boxHeight = canvas.height * scale * 0.1;  // 10% del alto de la página
                        const centerX = (canvas.width * scale - boxWidth) / 2;
                        const centerY = (canvas.height * scale - boxHeight) / 2;
                        box.style.width = `${boxWidth}px`;
                        box.style.height = `${boxHeight}px`;
                        box.style.left = `${centerX}px`;
                        box.style.top = `${centerY}px`;

                        // Habilitar drag-and-drop para el cuadro azul
                        let isDragging = false;
                        let offsetX = 0;
                        let offsetY = 0;

                        box.addEventListener('touchstart', (e) => {
                            isDragging = true;
                            offsetX = e.touches[0].clientX - box.getBoundingClientRect().left;
                            offsetY = e.touches[0].clientY - box.getBoundingClientRect().top;
                        });

                        document.addEventListener('touchmove', (e) => {
                            if (isDragging) {
                                const pageRect = pageDiv.getBoundingClientRect(); // Área de la página
                                let left = e.touches[0].clientX - offsetX;
                                let top = e.touches[0].clientY - offsetY;

                                // Limitar los movimientos del cuadro dentro de la página
                                left = Math.max(pageRect.left, Math.min(left, pageRect.right - boxWidth));
                                top = Math.max(pageRect.top, Math.min(top, pageRect.bottom - boxHeight));

                                box.style.left = `${left - pageRect.left}px`;
                                box.style.top = `${top - pageRect.top}px`;
                            }
                        });

                        document.addEventListener('touchend', () => {
                            isDragging = false;
                        });
                    });
                };

                // Mostrar la primera página
                renderPage(1);

                // Botones de navegación
                const prevButton = document.getElementById('prevButton');
                const nextButton = document.getElementById('nextButton');

                prevButton.addEventListener('click', () => {
                    if (currentPage > 1) {
                        currentPage--;
                        renderPage(currentPage);
                    }
                });

                nextButton.addEventListener('click', () => {
                    if (currentPage < pdf.numPages) {
                        currentPage++;
                        renderPage(currentPage);
                    }
                });
            });
        });

        // Función para habilitar drag and drop en los elementos
        function enableDragAndDrop(element, container) {
            let isDragging = false;
            let offsetX = 0;
            let offsetY = 0;

            element.addEventListener('mousedown', (event) => {
                isDragging = true;
                offsetX = event.offsetX;
                offsetY = event.offsetY;
                element.style.zIndex = 100;
            });

            container.addEventListener('mousemove', (event) => {
                if (isDragging) {
                    const rect = container.getBoundingClientRect(); 
                    let x = event.clientX - rect.left - offsetX;
                    let y = event.clientY - rect.top - offsetY;
                    element.style.left = `${x}px`;
                    element.style.top = `${y}px`;
                }
            });

            document.addEventListener('mouseup', () => {
                if (isDragging) {
                    isDragging = false;
                    element.style.zIndex = 5;
                }
            });
        }
    </script>

    <!-- Scripts de Bootstrap -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
</body>
</html>
